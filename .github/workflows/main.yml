name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@master
    - name: Install Rust (rustup)
      run: rustup update stable --no-self-update && rustup default stable
      shell: bash
      if: matrix.os != 'macos-latest'
    - name: Install Rust (macos)
      run: |
        curl https://sh.rustup.rs | sh -s -- -y
        echo ::add-path::$HOME/.cargo/bin
      if: matrix.os == 'macos-latest'

    - run: cargo build
    - run: cargo test
    - run: cargo test -p cargo-wasi-shim
    - run: cargo build -p assemble

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: rustup update beta && rustup update stable && rustup default beta
    - run: cargo install --debug --path .

    # Verify that we can switch between channels (stable/beta) and we'll
    # automatically get the wasi target on both.
    - run: (cd examples/hello-world && cargo +stable wasi build --release -v)
    - run: (cd examples/hello-world && cargo +beta wasi build --release -v)
    - run: (cd examples/markdown && cargo wasi build --release -v)

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
        - x86_64-apple-darwin
        - x86_64-unknown-linux-musl
        - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe
    steps:
    - uses: actions/checkout@master
    - name: Install Rust (rustup)
      run: rustup update stable --no-self-update && rustup default stable
      shell: bash
      if: matrix.os != 'macos-latest'
    - name: Install Rust (macos)
      run: |
        curl https://sh.rustup.rs | sh -s -- -y
        echo ::add-path::$HOME/.cargo/bin
      if: matrix.os == 'macos-latest'
    - run: rustup target add ${{ matrix.target }}

    # Target older versions of OSX (as old as we reasonably can) to ensure we
    # can run across a wide variety of systems.
    - name: Configure OSX deployment target
      run: echo ::set-env name=MACOSX_DEPLOYMENT_TARGET::10.7
      if: matrix.os == 'macos-latest'

    # Don't link the CRT dynamically to increase our binary compatibility.
    - name: Configure Windows build flags
      run: echo ::set-env name=RUSTFLAGS::-Ctarget-feature=+crt-static
      if: matrix.os == 'windows-latest'

    # Install a musl toolchain if we're on Linux
    - name: Install musl-gcc
      run: sudo apt update -y && sudo apt install -y musl-tools
      if: matrix.os == 'ubuntu-latest'

    # Build our actual binary
    - run: cargo build --release --target ${{ matrix.target }} --features default-tls-vendored

    # Plop the binary plus a `*.crate` file for the corresponding
    # target-specific package in `tmp` and upload the artifact.
    - run: cargo run -p assemble --bin krate ${{ matrix.target }} target/${{ matrix.target }}/release/cargo-wasi${{ matrix.ext }}
    - name: Publish binary build
      uses: actions/upload-artifact@v1
      with:
        name: cargo-wasi-${{ matrix.target }}
        path: tmp

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install Rust
      run: rustup update stable && rustup default stable

    # Download artiacts produced in build step
    - name: Download OSX
      uses: actions/download-artifact@v1
      with:
        name: cargo-wasi-x86_64-apple-darwin
    - name: Download Linux
      uses: actions/download-artifact@v1
      with:
        name: cargo-wasi-x86_64-unknown-linux-musl
    - name: Download Windows
      uses: actions/download-artifact@v1
      with:
        name: cargo-wasi-x86_64-pc-windows-msvc

    # On tags we actually publish crates, so configure env vars if this is a git
    # tag.
    - name: Configure release env vars
      run: |
        echo ::set-env name=NO_DRY_RUN::1
        echo ::set-env name=CARGO_REGISTRY_TOKEN::${{ secrets.CARGO_REGISTRY_TOKEN }}
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    # Take all the input `*.crate` files and run various checks. Additionally
    # assemble the "real" `cargo-wasi` crate which is published on crates.io.
    - run: cargo run -p assemble --bin weave
